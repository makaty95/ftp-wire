{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A multi-client FTP system built in Java, supporting file transfers, authentication, and command-based communication between clients and a central server.</p>"},{"location":"#overview","title":"Overview","text":"<p>FTP-WIRE was built to be an extensible, effecient and most importantly scalable solution for the file transfering service on a computer machine. it is mainly built of 2 modules: a <code>Client</code> and a <code>Server</code> modules, these modules should be integratable to any other apps in the future which need to use an ftp service (may be not yet acquired, but this is a long term goal).</p> <p>Many aspects where taken into consideration while designing such software architecture and functions including but not limited to:</p> <ul> <li>Effecient CPU utilization in the server module.</li> <li>Usage of many Design Patterns which results a generic code and improve scalability in the future, such as adding new commands or changing a   packet contents.</li> </ul> <p>The current project version had been refactored about 2 times before reaching this stage of the developement.</p>"},{"location":"#license","title":"License","text":"<p>The project uses the  MIT license .</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Authentication &amp; Handshaking system</li> <li>Command-based protocol (<code>LIST</code>, <code>RETR</code>, <code>STOR</code>, etc.)</li> <li>Modular structure with <code>Common</code>, <code>Server</code>, and <code>Client</code> packages</li> <li>Multi-client support \u2013 handles multiple connections simultaneously.</li> <li>Scalable &amp; High-performance \u2013 uses Thread Pool architecture and Non-blocking I/O (NIO).</li> <li>File transfer \u2013 clients can download files from the server.</li> <li>Command execution \u2013 processes various client commands.</li> <li>Logging &amp; Monitoring system \u2013 structured logs via <code>ClientLogger</code> / <code>ServerLogger</code> or debugging, tracking client activity, and monitoring transfers.</li> <li>Error handling &amp; Disconnection discovery \u2013 Clean detection of remote disconnections and graceful shutdown/termination logic of client disconnections.</li> <li>Extensible design patterns \u2013 leverages reusable patterns for future extensions.</li> </ul>"},{"location":"#supported-commands","title":"Supported Commands","text":"Command Parameters Description Status <code>HELP</code> <code>No parameters</code> Lists all supported commands. <code>QUIT</code> <code>No parameters</code> Terminates the client connection. <code>RETR</code> <code>file_path</code> <code>file_name</code> Retrieves a file from the server. Optionally rename it by providing <code>file_name</code>. <code>PWD</code> <code>No parameters</code> Displays the current working directory. <code>CWD</code> <code>directory_path</code> Changes the current working directory. <code>NLIST</code> <code>directory_path</code> List all files and folders inside a directory. <code>STOR</code> <code>file_path</code> <code>file_name</code> Uploads a file to the server. Optionally rename it by providing <code>file_name</code>. <p>Status indication</p> <p>  Implemented &amp; tested</p> <p>  Planned</p>"},{"location":"#project-core-modules","title":"Project Core Modules","text":"Package Description <code>Server</code> Core server logic, client management, and file handling <code>Client</code> An FTP client which is used to connect and transfer files <p>See the full Project Structure here</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Everyone is welcomed to contribute to FTP-WIRE project. Contribution can be techinical such as recommending or implementing a new feature, bugs fixing/discovery, or non-technical such as docs writing and fixing.</p> <p>Kindly find the full contribution guide here</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started</li> <li>Architecture Overview</li> <li>Usage Guide</li> </ul>"},{"location":"architecture-overview/","title":"Overview","text":"<p>FTP-WIRE follows a modular client-server architecture which separates concerns between command processing, data transfer, and connection management. The system is composed of two primary modules: a Server and a Client \u2014 which communicate using structured packet-based messages over TCP sockets.</p>"},{"location":"architecture-overview/#high-level-diagram","title":"High Level Diagram","text":"<p><pre><code>graph TD\n    classDef default rx:15, ry:15;\n\n    %% --- SERVER SIDE ---\n    subgraph ServerSide[\"Server\"]\n        ServerModule[\"Server Module\"]\n    end\n\n    %% --- CLIENTS SIDE ---\n    subgraph Client1[\"Client 1\"]\n        Client1UI[\"Client UI\"]\n        Client1Module[\"Client Module\"]\n        Client1UI --&gt; Client1Module\n    end\n\n    subgraph Client2[\"Client 2\"]\n        Client2UI[\"Client UI\"]\n        Client2Module[\"Client Module\"]\n        Client2UI --&gt; Client2Module\n    end\n\n    %% --- CONNECTIONS BETWEEN CLIENTS AND SERVER ---\n    Client1 &lt;--&gt;|Commands / Replies| ServerSide\n    Client2 &lt;--&gt;|Commands / Replies| ServerSide\n</code></pre> A Server Module is used to act as a central service for many clients. Each of those clients has a Client UI which could be different such as a CLI or a GUI application that integrates ftp-wire.  Each client should be able to operate with the server separately, regardless of other clients errors or disconnections.</p>"},{"location":"architecture-overview/#the-ftp-model","title":"The FTP Model","text":"<p>The Server/Client architecure follows the FTP-Model design which is shown as follows </p> <pre><code>\nflowchart LR\n    classDef rounded rx:15, ry:15;\n\n\n    User--&gt;|Interaction|UI\n    Client&lt;--&gt;user-storage[\"FileSystem\"]\n    subgraph User-FTP\n        UI&lt;--&gt;|Control|Client\n    end\n\n\n    subgraph Server-FTP\n        Server\n    end\n    Server&lt;--&gt;server-storage[\"FileSystem\"]\n    Server-FTP&lt;--&gt;|Command Connection|User-FTP\n    Server-FTP&lt;--&gt;|Data Connection|User-FTP\n\n    class User,UI,Client,user-storage,Server,server-storage rounded;</code></pre>"},{"location":"architecture-overview/#project-structure","title":"Project Structure","text":"<p>The Client Module is represented with the Client package, same for the Server Module. Each of the two modules has many other submodules, each one is providing a specific functionality. There are many common submodules between the Client and the Server modules which are located in the Common package </p> ftp-wire Client Controllers <ul> <li><code>CommandController.java</code> </li> <li><code>DataController.java</code></li> </ul> Loggers <ul> <li><code>ClientLogger.java</code></li> </ul> ReplyHandlers <ul> <li><code>FILE_INFO_ReplyHandler.java</code> </li> <li><code>MESSAGE_ReplyHandler.java</code> </li> <li><code>ReplyHandler.java</code></li> <li><code>CWD_ReplyHandler.java</code></li> <li><code>PWD_ReplyHandler.java</code></li> </ul> Models <ul> <li><code>ClientConfig.java</code> </li> <li><code>CommandSender.java</code> </li> <li><code>ConnectionManager.java</code> </li> <li><code>LoggerManager.java</code> </li> <li><code>Reply.java</code> </li> <li><code>ReplyPacketFactory.java</code> </li> <li><code>ResponseReceiver.java</code></li> </ul> <ul> <li><code>Client.java</code></li> </ul> clientCLI <ul> <li><code>ClientCLI.java</code> </li> <li><code>ClientCLILogger.java</code></li> <li><code>CommandHandler.java</code></li> <li><code>OfflineClientCLI.java</code></li> <li><code>OfflineCommandType.java</code></li> </ul> Common Exceptions <ul> <li><code>CommandFormatException.java</code></li> <li><code>NoCommandWithSpecifiedHeaderException.java</code></li> <li><code>RemoteDisconnectionException.java</code></li> </ul> Loggers <ul> <li><code>Logger.java</code></li> </ul> Models <ul> <li><code>Command.java</code> </li> <li><code>Status.java</code></li> <li><code>UtilityFunctions.java</code></li> </ul> Packets Communication <ul> <li><code>CommandPacket.java</code> </li> <li><code>ReplyPacket.java</code></li> </ul> HandShaking <ul> <li><code>DonePacket.java</code> </li> <li><code>HelloPacket.java</code> </li> <li><code>PairPacket.java</code> </li> <li><code>WelcomePacket.java</code></li> </ul> IO <ul> <li><code>PacketReader.java</code> </li> <li><code>PacketWriter.java</code> </li> </ul> <ul> <li><code>Packet.java</code></li> </ul> Serialization <ul> <li><code>PacketSerializer.java</code></li> </ul> Types <ul> <li><code>PacketType.java</code> </li> <li><code>ReplyType.java</code></li> </ul> Server Exceptions <ul> <li><code>CanNotReadPacketException.java</code> </li> </ul> Handlers <ul> <li><code>ChangeWorkingDirectoryHandler.java</code></li> <li><code>CommandErrorHandler.java</code> </li> <li><code>CommandHandler.java</code> </li> <li><code>ErrorHandler.java</code> </li> <li><code>HelpCommandHandler.java</code> </li> <li><code>ListFilesCommandHandler.java</code></li> <li><code>PrintWorkingDirectoryHandler.java</code></li> <li><code>QuitCommandHandler.java</code> </li> <li><code>RetrieveFileCommandHandler.java</code></li> </ul> HandShaking <ul> <li><code>HandShakeManager.java</code> </li> <li><code>Session.java</code></li> </ul> Loggers <ul> <li><code>ServerCLILogger.java</code> </li> <li><code>ServerLogger.java</code></li> </ul> Models Types <ul> <li><code>CommandType.java</code> </li> <li><code>ErrorType.java</code></li> </ul> <ul> <li><code>ClientProfile.java</code> </li> <li><code>CommandSelectorDispatcher.java</code> </li> <li><code>ServerConfig.java</code></li> <li><code>TaskDispatcher.java</code> </li> <li><code>ThreadPool.java</code></li> <li><code>UserConnection.java</code> </li> </ul> Registeries <ul> <li><code>SessionRegistry.java</code></li> </ul> SocketAcceptors <ul> <li><code>CommandSocketAcceptor.java</code> </li> <li><code>DataSocketAcceptor.java</code></li> </ul> Tasks <ul> <li><code>CommandTask.java</code> </li> <li><code>DataTask.java</code> </li> <li><code>SendFileTask.java</code> </li> <li><code>SendPacketTask.java</code> </li> <li><code>Task.java</code></li> </ul> <ul> <li><code>Server.java</code></li> </ul> Run <ul> <li><code>Client_CLI.java</code> </li> <li><code>Server_CLI.java</code></li> </ul>"},{"location":"architecture-overview/#dataconnection-flow","title":"Data/Connection flow","text":"<p>The Client first will do a handshaking process which will identify his connection info and username then if the client connection success (for now there is no login functionality), he can send a command to the server then the server will schedule a task to serve that command. After the task is completed, the server schedule another task for sending a reply packet to the client which will identify the success or failure of the sent command. this also could be followed by sending a file from the server to the client through the Data Connection.</p> <pre><code>sequenceDiagram\n    participant C as Client\n    participant S as Server\n    participant H as Handler\n\n    C&lt;&lt;-&gt;&gt;S: HandShaking process\n    C-&gt;&gt;S: Send CommandPacket\n    S-&gt;&gt;H: Dispatch Command\n    H--&gt;&gt;S: Generate ReplyPacket\n    S--&gt;&gt;C: Send ReplyPacket</code></pre>"},{"location":"client-architecture/","title":"Client","text":"<p>The Client Module is responsible for command execution and communication with the Server. It handles user inputs, serializes commands, processes server replies, and manages local data storage and logging.</p> <p></p> <p>Lets Explain the above diagram in depth.</p>"},{"location":"client-architecture/#ui","title":"UI","text":"<p>The UI is refering to any type of control interface which is handled by the user or even automated by another software.</p>"},{"location":"client-architecture/#client","title":"Client","text":"<p>The <code>Client</code> is the root controller which abstracts all the functionalities of the module. It makes it easy for any software to integrate it.For example those functionalities include Sending a Command, Specifing the client IP and username, Specifing Remote host and so on..</p>"},{"location":"client-architecture/#loggermanager","title":"LoggerManager","text":"<p>The <code>LogggerManager</code> is an important module as it is responsible for all types of logs which are being recorded by the whole running Client Module. This module allows us not just to have one logger but also to add many loggers which operate at the same time.For example we could have 2 loggers: one for the CLI to help a user see what is happening and the other is writing into some file on the disk for later debugging or tracing.</p>"},{"location":"client-architecture/#commandcontroller","title":"CommandController","text":"<p>This controller acts as the Central coordinator for commands processing. it is responsible for sending and receiving commands from the Remote Server. </p>"},{"location":"client-architecture/#datacontroller","title":"DataController","text":"<p>Just like the <code>CommandController</code>, the <code>DataController</code> is responsible for file receive and sending. </p>"},{"location":"client-architecture/#serializer","title":"Serializer","text":"<p>The <code>Serializer</code> is used to transfer objects on the network so that it can be translated properly in the server side. you can read about this concept on wikipedia to have an idea on how it works.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Coming soon. </p>"},{"location":"faq/","title":"FAQ","text":"<p>Coming soon. </p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 17+</li> <li>Maven 3.8+</li> <li>An IDE of your choose (Eclipse, VSCode, Intellij, etc..)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>You can use any command line too such as gitbash, cmder. powershell or even integrated terminals like IntelliJ terminal for the installation step. <pre><code>git clone https://github.com/makaty95/ftp-wire.git\n</code></pre> Enter the project directory <pre><code>cd ftp-wire\n</code></pre></p>"},{"location":"getting-started/#build","title":"Build","text":"<p>Build the project using maven <pre><code>mvn clean install\n</code></pre> This should generate a directory called <code>target</code>, which will have the runnable jar files for both client and server.</p>"},{"location":"getting-started/#run","title":"Run","text":"<p>To run the client or the server you can simply use the following commands of java <pre><code>java -jar target/client-cli.jar\n</code></pre> <pre><code>java -jar target/server-cli.jar\n</code></pre> Or you can use the shell files</p> <p><pre><code>./ftp-wire-client.sh\n</code></pre> <pre><code>./ftp-wire-server.sh\n</code></pre></p>"},{"location":"server-architecture/","title":"Server","text":"<p>The Server Module is responsible for receiving and executing commands sent by clients. It identifies the appropriate handler for each command, builds the corresponding tasks, and schedules them for execution on worker threads. After processing, the server may reply to the client or send files stored on disk.</p> <p></p> <p>Lets Explain the above diagram in depth.</p>"},{"location":"server-architecture/#commandselectordispatcher","title":"CommandSelectorDispatcher","text":"<p>This module is responsible for receiving different clients commands, unpack it to a <code>Command</code> and then proceeed to recognize the command type following it's <code>CommandHandler</code>. Then it will pass the client command to the handler for the next step.</p>"},{"location":"server-architecture/#commandhandler","title":"CommandHandler","text":"<p>Each command type have a specified <code>CommandHandler</code> which is responsible for handling client commands of that type. The handler takes the command then it does all the dirty work like checking for command validity or parameters, check if the user have a registerd session on the server <code>SessionRegistry</code>, etc.. Then, it uses <code>TaskDispatcher</code> to do the acctual work.</p>"},{"location":"server-architecture/#taskdispatcher","title":"TaskDispatcher","text":"<p>Each user command is transformed into a set of tasks which can be done either Synchronously or Asynchronously. The module will take a Task and then schedules this task on it's ThreadPool.</p>"},{"location":"server-architecture/#threadpool","title":"ThreadPool","text":"<p>The Thread Pool Design is a common software design pattern which is used to perform many tasks at the same time with equal CPU utilization for all tasks. This is importatnt because we don't want some clients to have a better performance at the expense of some other clients which would results bad usability.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#client","title":"Client","text":"<p>Run the client on the terminal. it should display something like this <pre><code>$ ./ftp-wire-client.sh\nTerminal type: xterm-256color\n\n   ___  __\n /'___\\/\\ \\__                               __\n/\\ \\__/\\ \\ ,_\\  _____            __  __  __/\\_\\  _ __    __\n\\ \\ ,__\\\\ \\ \\/ /\\ '__`\\  _______/\\ \\/\\ \\/\\ \\/\\ \\/\\`'__\\/'__`\\\n \\ \\ \\_/ \\ \\ \\_\\ \\ \\L\\ \\/\\______\\ \\ \\_/ \\_/ \\ \\ \\ \\ \\//\\  __/\n  \\ \\_\\   \\ \\__\\\\ \\ ,__/\\/______/\\ \\___x___/'\\ \\_\\ \\_\\\\ \\____\\\n   \\/_/    \\/__/ \\ \\ \\/           \\/__//__/   \\/_/\\/_/ \\/____/\n                  \\ \\_\\\n                   \\/_/\n\n==================================================\n                  (OFFLINE MODE)\n==================================================\n(TestUser18)&gt;\n</code></pre> The client is initially in offline mode which allows you to specify many configurations such as your IP, username, and so on. You can show all available offline to use commands by typing <code>help</code> <pre><code>(TestUser18)&gt; help\n\n----------------------------------------------------------------------------------------------------\n| Command              | Parameters                     | Description                              |\n----------------------------------------------------------------------------------------------------\n| [1]set_username      | new_username                   | set your username which will be sent to  |\n|                      |                                | the remote.                              |\n| [2]set_remote        | remote_hostname remote_port    | set the hostname and port of the remote. |\n| [3]set_local         | local_hostname local_port      | set the hostname and port of your        |\n|                      |                                | machine.                                 |\n| [4]connect           |                                | initialize the connection between your   |\n|                      |                                | machine and the remote.                  |\n| [5]clear             |                                | clears your terminal screen.             |\n| [6]conn_info         |                                | display info about both local and remote |\n|                      |                                | connection.                              |\n| [7]help              |                                | display commands info list.              |\n----------------------------------------------------------------------------------------------------\n(TestUser18)&gt;\n</code></pre> This will show you all the commands which you can use to configure your client before your connection with remote. Lets walkthrough those one by one:</p> <ul> <li><code>set_username</code> <p>This simply sets your username locally and also when connecting to the server. <pre><code>(TestUser18)&gt; set_username Terminator00\n(Terminator00)&gt;\n</code></pre></p> </li> <li><code>set_remote</code> <p>This sets the server hostname and port which you will be connecting to. <pre><code>(Terminator00)&gt; set_remote 192.168.1.13 2121\n(Terminator00)&gt;\n</code></pre></p> </li> <li><code>set_local</code> <p>This sets your hostname and port which will be used to identify your client on the remote. <pre><code>(Terminator00)&gt; set_local 192.168.1.8 8989\n(Terminator00)&gt;\n</code></pre></p> </li> <li><code>conn_info</code> <p>Now you can display all your configurations using this command. <pre><code>(Terminator00)&gt; conn_info\nRemote:\n         IP: 192.168.1.13\n         PORT: 2121\nLocal:\n         IP: 192.168.1.8\n         PORT: 8989\n         Username: Terminator00\n(Terminator00)&gt;\n</code></pre></p> </li> <li> <p><code>clear</code></p> <p>This will just clear your terminal screen, nothing fancy.</p> </li> <li> <p><code>connect</code></p> <p>This will instantiate the ftp connection between your client and the server. You are now online and can easily use all  the FTP commands such as <code>RETR</code>, <code>PWD</code>, <code>CWD</code>, etc.. You can also recognize the path preceeded with <code>@</code> which is shown near your username: <code>@/</code>, this shows your current opened working directory on the server. Check the complete commands list here <pre><code>(Terminator00)&gt; connect\n==================================================\n                  (ONLINE MODE)\n==================================================\n(Terminator00@\\)&gt;\n</code></pre></p> <p>Wrong remote info</p> <p>If you entered a wrong ftp-wire server address or port, it will result in a connection failure.  <pre><code>(Terminator00)&gt; connect\n[ERROR]: Failed to connect to the remote, please verify remote info.\n==================================================\n                (OFFLINE MODE)\n==================================================\n(Terminator00)&gt;\n</code></pre></p> </li> </ul>"},{"location":"usage/#server","title":"Server","text":"<p>Run the server on your terminal <pre><code>$ ./ftp-wire-server.sh\n[SERVER_LOGGER] [INFO]: CommandAcceptor instance is up and running.\n[SERVER_LOGGER] [INFO]: DataAcceptor instance is up and running.\n[SERVER_LOGGER] [INFO]: Server started successfully.\n[SERVER_LOGGER] [INFO]: Command Selector Dispatcher is up and running.\n</code></pre> Now your server is running and listening for clients to connect, Simple as that.</p> <p>Server Module</p> <p>The server module is under developement. It needs more control which allows you to specify many attributes such as IP or PORT. Also, registering clients accounts (for future login mechanism) so that a client will be allowed to access the content only if it is registered. All those functionalities should be implemented in the near future Inshallah.</p>"}]}